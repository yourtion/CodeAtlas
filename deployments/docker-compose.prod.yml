version: '3.8'

# Production Docker Compose configuration for CodeAtlas Knowledge Graph Indexer
# This configuration includes:
# - PostgreSQL with pgvector and AGE extensions
# - CodeAtlas API server with health checks
# - Persistent volumes for data
# - Production-ready networking and security settings

services:
  # PostgreSQL database with pgvector and AGE extensions
  db:
    image: codeatlas/postgres:latest
    build:
      context: ../docker
      dockerfile: Dockerfile
    container_name: codeatlas-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-codeatlas}
      POSTGRES_USER: ${DB_USER:-codeatlas}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - codeatlas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-codeatlas} -d ${DB_NAME:-codeatlas}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CodeAtlas API server
  api:
    image: codeatlas/api:latest
    build:
      context: ..
      dockerfile: deployments/Dockerfile.api
    container_name: codeatlas-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      # Database configuration
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-codeatlas}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-codeatlas}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      
      # Indexer configuration
      - INDEXER_BATCH_SIZE=${INDEXER_BATCH_SIZE:-100}
      - INDEXER_WORKER_COUNT=${INDEXER_WORKER_COUNT:-4}
      - INDEXER_GRAPH_NAME=${INDEXER_GRAPH_NAME:-code_graph}
      
      # Embedding configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-openai/text-embedding-3-small}
      - EMBEDDING_API_KEY=${EMBEDDING_API_KEY}
      - EMBEDDING_API_URL=${EMBEDDING_API_URL:-http://localhost:1234/v1/embeddings}
      - EMBEDDING_DIMENSIONS=${EMBEDDING_DIMENSIONS:-768}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-50}
      
      # API server configuration
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8080}
      - API_ENABLE_AUTH=${API_ENABLE_AUTH:-false}
      - API_CORS_ORIGINS=${API_CORS_ORIGINS:-*}
      - API_REQUEST_TIMEOUT=${API_REQUEST_TIMEOUT:-5m}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - codeatlas-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

networks:
  codeatlas-network:
    driver: bridge
    name: codeatlas-network

volumes:
  postgres_data:
    driver: local
    name: codeatlas-postgres-data
